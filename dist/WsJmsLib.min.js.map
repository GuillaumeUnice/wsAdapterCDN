{"version":3,"sources":["webpack:///WsJmsLib.min.js","webpack:///webpack/bootstrap 3d0cceb93c7afa3e472e","webpack:///./src/WsJMSLib.ts","webpack:///./src/index.ts"],"names":["WsJmsLib","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","wsJmsLib","this","connection","session","consumers","prototype","createDestination","name","indexOf","baseTopicUrl","createTopic","baseQueueUrl","createQueue","Error","buildMessage","message","textMessage","createTextMessage","connect","url","callback","connectionFactory","JmsConnectionFactory","that","connectionFuture","createConnection","getValue","err","console","error","createSession","Session","AUTO_ACKNOWLEDGE","start","subscribe","channelName","messageListener","topic","consumer","createConsumer","setMessageListener","send","dest","producer","createProducer","future_1","exception","e","close","unsubscribe","WsJMSLib_1"],"mappings":"AAAA,GAAIA,UACK,SAAUC,GCGnB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,UAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,UAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDOM,SAASI,EAAQD,EAASH,GAE/BI,EAAOD,QAAUH,EAAoB,IAKhC,SAASI,EAAQD,GAGtB,YErDD,IAAAQ,GAAA,WASC,QAAAA,KACCC,KAAKC,cACLD,KAAKE,WACLF,KAAKG,aA6EP,MA3ESJ,GAAAK,UAAAC,kBAAR,SAA0BC,GACzB,GAA2C,GAAvCA,EAAKC,QAAQR,EAASS,cACzB,MAAOR,MAAKE,QAAQO,YAAYH,EAE5B,IAA2C,GAAvCA,EAAKC,QAAQR,EAASW,cAC9B,MAAOV,MAAKE,QAAQS,YAAYL,EAGhC,MAAM,IAAIM,OAAM,mDAITb,EAAAK,UAAAS,aAAR,SAAsBC,GACpB,GAAIC,GAA2Bf,KAAKE,QAAQc,kBAAkBF,EAC9D,OAAOC,IAKHhB,EAAAK,UAAAa,QAAP,SAAeC,EAAaC,GACzB,GAAIC,GAAoB,GAAIC,sBAAqBH,GAE/CI,EAAOtB,KAEPuB,EAAmBH,EAAkBI,iBAAiB,WACzD,IACCF,EAAKrB,WAAasB,EAAiBE,WAClC,MAAOC,GACRC,QAAQC,MAAMF,GAGfJ,EAAKpB,QAAUoB,EAAKrB,WAAW4B,iBAAqBC,QAAQC,kBAC5DT,EAAKrB,WAAW+B,MAAM,WACrBb,SAKIpB,EAAAK,UAAA6B,UAAP,SAAiBC,EAAqBC,GAKrC,GAAIC,GAAuBpC,KAAKE,QAAQO,YAAYyB,GAChDG,EAAqBrC,KAAKE,QAAQoC,eAAeF,EACrDpC,MAAKG,UAAU+B,GAAeG,EAC9BA,EAASE,mBAAmBJ,IAItBpC,EAAAK,UAAAoC,KAAP,SAAY1B,EAAiBsB,EAAejB,GAC3C,GAAIsB,GAAsBzC,KAAKK,kBAAkB+B,GAC7CM,EAAqB1C,KAAKE,QAAQyC,eAAeF,GAC/C1B,EAA2Bf,KAAKa,aAAaC,EAEnD,KACC,GAAI8B,GAA0BF,EAASF,KAAKzB,EAAa,WACnD6B,EAAOC,WACTlB,QAAQC,MAAMgB,EAAOC,WAEvB1B,MAED,MAAO2B,GACRnB,QAAQC,MAAMkB,GAEdJ,EAASK,SAGHhD,EAAAK,UAAA4C,YAAP,SAAmBd,EAAqBf,GACtC,GAAIkB,GAAqBrC,KAAKG,UAAU+B,EACpCG,WACKrC,MAAKG,UAAU+B,GACtBG,EAASU,MAAM5B,KApFLpB,EAAAS,aAAuB,QACvBT,EAAAW,aAAuB,QAsFvCX,IAzFcR,GAAAQ,SAAQA,GF2IhB,SAASP,EAAQD,EAASH,GAE/B,YG/ID,IAAA6D,GAAA7D,EAAuB,EAAfG,GAAAQ,SAAAkD,EAAAlD","file":"WsJmsLib.min.js","sourcesContent":["var WsJmsLib =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(2);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t/// <reference path=\"./wsJMSKaazing.d.ts\" />\n\t\"use strict\";\n\tvar wsJmsLib = (function () {\n\t    //////////////////////////////////////////////////////////////////////////////////\n\t    function wsJmsLib() {\n\t        this.connection = {};\n\t        this.session = {};\n\t        this.consumers = {};\n\t    }\n\t    wsJmsLib.prototype.createDestination = function (name) {\n\t        if (name.indexOf(wsJmsLib.baseTopicUrl) == 0) {\n\t            return this.session.createTopic(name);\n\t        }\n\t        else if (name.indexOf(wsJmsLib.baseQueueUrl) == 0) {\n\t            return this.session.createQueue(name);\n\t        }\n\t        else {\n\t            throw new Error(\"Destination must start with /topic/ or /queue/\");\n\t        }\n\t    };\n\t    wsJmsLib.prototype.buildMessage = function (message) {\n\t        var textMessage = this.session.createTextMessage(message);\n\t        return textMessage;\n\t    };\n\t    //////////////////////////////////////////////////////////////////////////////////\n\t    wsJmsLib.prototype.connect = function (url, callback) {\n\t        var connectionFactory = new JmsConnectionFactory(url);\n\t        var that = this;\n\t        var connectionFuture = connectionFactory.createConnection(function () {\n\t            try {\n\t                that.connection = connectionFuture.getValue();\n\t            }\n\t            catch (err) {\n\t                console.error(err);\n\t            }\n\t            that.session = that.connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n\t            that.connection.start(function () {\n\t                callback();\n\t            });\n\t        });\n\t    };\n\t    ;\n\t    wsJmsLib.prototype.subscribe = function (channelName, messageListener) {\n\t        // assuming connection has already been established and started\n\t        // ideally we need to maintain the state of the connection and throw error\n\t        // if the controller calls subscribe before connection is established\n\t        // or after the connection is closed\n\t        var topic = this.session.createTopic(channelName);\n\t        var consumer = this.session.createConsumer(topic);\n\t        this.consumers[channelName] = consumer;\n\t        consumer.setMessageListener(messageListener);\n\t    };\n\t    ;\n\t    wsJmsLib.prototype.send = function (message, topic, callback) {\n\t        var dest = this.createDestination(topic);\n\t        var producer = this.session.createProducer(dest);\n\t        var textMessage = this.buildMessage(message);\n\t        try {\n\t            var future_1 = producer.send(textMessage, function () {\n\t                if (future_1.exception) {\n\t                    console.error(future_1.exception);\n\t                }\n\t                callback();\n\t            });\n\t        }\n\t        catch (e) {\n\t            console.error(e);\n\t        }\n\t        producer.close();\n\t    };\n\t    wsJmsLib.prototype.unsubscribe = function (channelName, callback) {\n\t        var consumer = this.consumers[channelName];\n\t        if (consumer) {\n\t            delete this.consumers[channelName];\n\t            consumer.close(callback);\n\t        }\n\t    };\n\t    ;\n\t    wsJmsLib.baseTopicUrl = 'topic';\n\t    wsJmsLib.baseQueueUrl = 'queue';\n\t    return wsJmsLib;\n\t}());\n\texports.wsJmsLib = wsJmsLib;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar WsJMSLib_1 = __webpack_require__(1);\n\texports.wsJmsLib = WsJMSLib_1.wsJmsLib;\n\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// WsJmsLib.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3d0cceb93c7afa3e472e","/// <reference path=\"./wsJMSKaazing.d.ts\" />\n\nexport  class wsJmsLib {\n\n\tprivate static baseTopicUrl: string = 'topic';\n\tprivate static baseQueueUrl: string = 'queue';\n\n  public connection: any;\n  public session: any;\n  public consumers: any;\n\t//////////////////////////////////////////////////////////////////////////////////\n\tconstructor() {\n\t\tthis.connection = {};\n\t\tthis.session = {};\n\t\tthis.consumers = {};\n\t}\n\tprivate createDestination(name: string): Topic | Queue {\n\t\tif (name.indexOf(wsJmsLib.baseTopicUrl) == 0) {\n\t\t\treturn this.session.createTopic(name);\n\t\t}\n\t\telse if (name.indexOf(wsJmsLib.baseQueueUrl) == 0) {\n\t\t\treturn this.session.createQueue(name);\n\t\t}\n\t\telse {\n\t\t\tthrow new Error(\"Destination must start with /topic/ or /queue/\");\n\t\t}\n\t}\n\n  private buildMessage (message: string): textMessage {\n    let textMessage: textMessage = this.session.createTextMessage(message);\n    return textMessage;\n  }\n\n\t//////////////////////////////////////////////////////////////////////////////////\n\n\tpublic connect(url: string, callback: Function) {\n    let connectionFactory = new JmsConnectionFactory(url);\n\n\t\tlet that = this;\n\n\t\tlet connectionFuture = connectionFactory.createConnection(function(){\n\t\t\ttry {\n\t\t\t\tthat.connection = connectionFuture.getValue();\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\n\t\t\tthat.session = that.connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n\t\t\tthat.connection.start(function() {\n\t\t\t\tcallback();\n\t\t\t});\n\t\t});\n\t};\n\n\tpublic subscribe(channelName: string, messageListener: Function) {\n\t\t// assuming connection has already been established and started\n\t\t// ideally we need to maintain the state of the connection and throw error\n\t\t// if the controller calls subscribe before connection is established\n\t\t// or after the connection is closed\n\t\tlet topic: Topic | Queue = this.session.createTopic(channelName);\n\t\tlet consumer: Consumer = this.session.createConsumer(topic);\n\t\tthis.consumers[channelName] = consumer;\n\t\tconsumer.setMessageListener(messageListener);\n\t};\n\n\n\tpublic send(message: string, topic: string, callback: Function): void {\n\t\tlet dest: Queue | Topic = this.createDestination(topic);\n\t\tlet producer: Producer = this.session.createProducer(dest);\n    let textMessage: textMessage = this.buildMessage(message);\n\t\t\n\t\ttry {\n\t\t\tlet future: FutureException = producer.send(textMessage, function () {\n\t\t\t\t\tif (future.exception) {\n\t\t\t\t\t\t\tconsole.error(future.exception);\n\t\t\t\t\t}\n\t\t\t\t\tcallback();\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t\t\tproducer.close();\n\t}\n\n  public unsubscribe(channelName: string, callback: Function) {\n    let consumer: Consumer = this.consumers[channelName];\n    if (consumer) {\n      delete this.consumers[channelName];\n      consumer.close(callback);\n    }\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/WsJMSLib.ts","export {wsJmsLib} from './WsJMSLib';\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/index.ts"],"sourceRoot":""}